##########################
#AutoLimb June 28 9pmm
##########################

from PySide import QtCore, QtGui
from shiboken import wrapInstance
import maya.OpenMayaUI as apiUI
import sys
jointList = []
pjointList = []
poleAxis = 'F'
proxySelect = []
poleValue = 0
positivePol=[]
newaxis = 0

def getMayaWindow():
    """
    Get the main Maya window as a QtGui.QMainWindow instance
    @return: QtGui.QMainWindow instance of the top level Maya windows
    """
    ptr = apiUI.MQtUtil.mainWindow()
    if ptr is not None:
        return wrapInstance(long(ptr), QtGui.QMainWindow)
        
class AutoArmGUI(QtGui.QDialog):
    def __init__(self,  parent=getMayaWindow()):
        super(AutoArmGUI, self).__init__(parent)
        self.initUI()
         
    def initUI(self):
        # layout
        self.setLayout(QtGui.QVBoxLayout())
        self.setWindowTitle("Auto Arm")
        # add tabs          
        self.layout().addWidget(MyButtons())
        self.show()
        
        
class MyButtons(QtGui.QWidget):

    def __init__(self, parent=None):
        super(MyButtons, self).__init__(parent)
        
        # layout
        self.setLayout(QtGui.QVBoxLayout())

        # buttons
        self.rigDesc = QtGui.QLabel ("Position proxy & generate the rig!")
        self.layout().addWidget(self.rigDesc)
        self.line = QtGui.QLabel ("")
        self.layout().addWidget(self.line)

        self.steplabel = QtGui.QLabel ("Step1")
        self.layout().addWidget(self.steplabel)
        step1_btn =QtGui.QPushButton("Make Proxy")
        self.layout().addWidget(step1_btn)
        step1_btn.clicked.connect(self.step1buttonClicked)
        
        self.step2label = QtGui.QLabel ("Step2")
        self.layout().addWidget(self.step2label)
        self.edittext = QtGui.QLineEdit("name_limb")
        self.layout().addWidget(self.edittext)
        self.chbox_bend = QtGui.QCheckBox("Bendy")
       # self.layout().addWidget(self.chbox_bend)
        self.chbox_stretchy = QtGui.QCheckBox("Stretchy")
        self.layout().addWidget(self.chbox_stretchy)
  
        step2btn =QtGui.QPushButton("Generate")
        self.layout().addWidget(step2btn)
        step2btn.clicked.connect(self.step2buttonClicked)
        jointList = []
        pjointList = []

    #Step 1 Button Pushed
    def step1buttonClicked(self):

        #creates joints and attaches to spheres
        def xyzSphere(xyzSphere):
            cmds.select( clear=True )
            jointLoc = cmds.xform(xyzSphere, q=1, ws=1, t=1)
            scaleLoc = cmds.xform(xyzSphere, q=1, ws=1, s=1)
            proxyJoint=cmds.joint(p=(jointLoc),r=(scaleLoc[0]))
            pjointList.append(proxyJoint)
            cmds.parent(proxyJoint,xyzSphere)
            cmds.setAttr(proxyJoint + '.visibility',0)
            
        #set inputs for joint locations and pivot location
        cmds.polySphere( r=1, n = 'firstJoint' ) 
        cmds.move(-6,0,0,'firstJoint') 
        cmds.polySphere( r=1, n = 'secondJoint' )
        cmds.polySphere( r=1, n = 'thirdJoint' )
        cmds.move(6,0,0,'thirdJoint')
        cmds.polyCylinder(r=.3, n='tendon')
        cmds.rotate(0,0,90,'tendon')
        cmds.move(-3,0,0,'tendon')
        cmds.scale(1,3,1,'tendon')
        cmds.polyCylinder(r=.3, n='tendon02')
        cmds.rotate(0,0,90,'tendon02')
        cmds.move(3,0,0,'tendon02')
        cmds.scale(1,3,1,'tendon02')
        
        #poleVector
        cmds.polyCube(n='poleGuide')
        cmds.move(0,3,0,'poleGuide')
        cmds.scale(.1,6,.1,'poleGuide')
        cmds.select( clear=True )
        cmds.joint(n='poleJoint')
        cmds.setAttr('poleJoint.visibility',0)
        cmds.move(0,6,0,'poleJoint')
        cmds.spaceLocator(n='poleVector')
        cmds.move(0,6,0,'poleVector')
        cmds.parent('poleJoint','poleVector')
        
        #finding sphere location and setting up    
        xyzSphere('firstJoint')
        xyzSphere('secondJoint')
        xyzSphere('thirdJoint')
        pjointList.append('poleJoint')
        
        #Skinning to joints
        cmds.select( d=True )
        cmds.select('tendon',tgl=True)
        cmds.select(pjointList,tgl=True)
        cmds.skinCluster(tsb=True, maximumInfluences=4, normalizeWeights=1, obeyMaxInfluences=True)
        
        cmds.select( d=True )
        cmds.select('tendon02',add=True)
        cmds.select(pjointList,add=True)
        cmds.skinCluster(tsb=True, maximumInfluences=4, normalizeWeights=1, obeyMaxInfluences=True)
        
        cmds.select( d=True )
        cmds.select('poleGuide',add=True)
        cmds.select(pjointList,add=True)
        cmds.skinCluster(tsb=True, maximumInfluences=4, normalizeWeights=1, obeyMaxInfluences=True)
       
        #Put everything in a group
        cmds.group('firstJoint', n='proxy_grp')
        cmds.parent('secondJoint','proxy_grp')
        cmds.parent('thirdJoint','proxy_grp')
        cmds.parent('tendon','proxy_grp')
        cmds.parent('tendon02','proxy_grp')
        cmds.parent('poleGuide','proxy_grp')
        cmds.parent('poleVector','proxy_grp')

        ###don't use select all, find better way
                            
    #Step 2 Button Pushed     
    def step2buttonClicked(self):
        poleValue = []
        poleAxis = ''
        newAxis = 0
        
        #Inputs from proxy group        
        for Joint in pjointList:
           if Joint != 'poleJoint':
               cmds.select( d=True )
               jointLoc = cmds.xform(Joint, q=1, ws=1, t=1) 
               scaleLoc = cmds.xform(Joint, q=1, ws=1, s=1)
               pJoint=cmds.joint(p=(jointLoc))
               jointList.append(pJoint)
      

        polePos = cmds.xform('poleVector', q=1, ws=1, t=1)
        polejPost = cmds.xform('secondJoint', q=1, ws=1, t=1)
        
        polecalcX = polejPost[0] - polePos[0] 
        polecalcY = polejPost[1] - polePos[1] 
        polecalcZ = polejPost[2] - polePos[2] 
        
        if polecalcX < 0:
            poscalcX = polecalcX * -1
        else:
            poscalcX = polecalcX
            
            
        if polecalcY < 0:
            poscalcY = polecalcY * -1
        else:
            poscalcY = polecalcY
            
            
        if polecalcZ < 0:
            poscalcZ = polecalcZ * -1
        else:
            poscalcZ = polecalcZ                   
        
        
        

        
       
        if poscalcX > poscalcY and poscalcX > poscalcZ:

           poleValue = polePos[0]
           poleAxis = 'X'
           print 'pole vector in x set'
        
        if poscalcY > poscalcX and poscalcY > poscalcZ:
 
           poleValue = polePos[1]
           poleAxis = 'Y'
           print 'Pole vector in y set'
                     
        if poscalcZ > poscalcX and poscalcZ > poscalcY:
             
           poleValue = polePos[2]
           poleAxis = 'Z'
           print 'pole vector in z set'

        cmds.delete('proxy_grp')
        inputText = self.edittext.text()
        
        ####################
        ### Limb Set up ###
        ####################
             
        jointList2 = cmds.ls()
        UserIn = inputText
        cmds.group(em = True, n = UserIn + '_grp')
        cmds.group(em = True, n = UserIn + '_controls01')
        cmds.group(em = True, n= UserIn + '_skeleton01' )
          
        if poleAxis == 'Y':
            #set preferred angle
            cmds.rotate( '90deg', 0, 0, jointList[1] )
            cmds.joint(jointList[1], e=True, spa=True) 
            cmds.rotate( 0, 0, 0, jointList[1] )
        if poleAxis == 'Z':
            #set preferred angle
            cmds.rotate( '90deg', 0, 0, jointList[1] )
            cmds.joint(jointList[1], e=True, spa=True) 
            cmds.rotate( 0, 0, 0, jointList[1] )
        if poleAxis == 'X':
            #set preferred angle
            cmds.rotate(0, 0,  '90deg', jointList[1] )
            cmds.joint(jointList[1], e=True, spa=True) 
            cmds.rotate( 0, 0, 0, jointList[1] )
            
        firstJoint = jointList[0]
        lastJoint = jointList[-1]
                 
        #IK / FK Switch: creating control 
        controlC = cmds.circle(nr=(0,1,0), c=(0, 0, 0), r=scaleLoc[0], n=UserIn + '_arm_anim')
        ikfk_attr = cmds.addAttr(controlC, longName='IKFK', attributeType='float', defaultValue = 1, k=True )
                    
        #Parents joint to previous using Index & retrieve value for first and last jt. 
        for everyobj in jointList:
            if jointList.index(everyobj) != 0:
                indexNum = jointList.index(everyobj)
                lowerNum = indexNum - 1
                cmds.parent( jointList[indexNum], jointList[lowerNum] )           

        fkcontrolList = []
        #FK Set up (off by default) 
        for everyobj in jointList:
            nameC = everyobj + '_anim'
            fkcontrolList.append(nameC)

            #cmds.rename(everyobj, UserIn + '_jnt')
            cmds.circle(nr=(0,1,0), c=(0, 0, 0), r=scaleLoc[0], n= nameC) 
            cmds.parentConstraint(everyobj, nameC)
            cmds.parentConstraint(everyobj, nameC, rm = True)
            cmds.orientConstraint(nameC, everyobj, w=1, mo = True)      
                                                        
            #IK / FK Switch: FK connections to condition 
            condNode = cmds.shadingNode('condition', asUtility=True)
            cmds.setAttr(condNode + ".firstTerm", 0) 
            cmds.setAttr(condNode + ".secondTerm", 1) 
            cmds.connectAttr(UserIn + '_arm_anim.IKFK', condNode + '.firstTerm')
            cmds.connectAttr(condNode + '.outColorR', nameC  +  '.visibility')
            #Set Driven Keys
            cmds.setDrivenKeyframe( everyobj + '_orientConstraint1.' + nameC +'W0', cd = UserIn +'_arm_anim.IKFK', dv = 0, v = 1 )
            cmds.setDrivenKeyframe( everyobj + '_orientConstraint1.' + nameC +'W0', cd = UserIn + '_arm_anim.IKFK', dv = 1, v = 0 )
                
        #parent control under each other for fk  
        for everyobj in fkcontrolList:           
            if fkcontrolList.index(everyobj) != 0:
                indexNum2 = fkcontrolList.index(everyobj) 
                lowerNum2 = indexNum2 - 1               
                cmds.parent( fkcontrolList[indexNum2], fkcontrolList[lowerNum2] ) 
      
        #IK & anim control set up
        cmds.ikHandle( sj=firstJoint, ee=lastJoint, sol= 'ikRPsolver', n = UserIn + 'ikRPS_name' )
        cmds.parentConstraint(lastJoint, controlC)
        cmds.parentConstraint(lastJoint, controlC, rm = True)
        cmds.parentConstraint(controlC, UserIn + 'ikRPS_name', w=1, mo = True)
       
        #distance of leg
        distline01 = distanceCalc(jointList[0],jointList[1])
        distline02 = distanceCalc(jointList[1],jointList[2])
        d_calc = distline01 + distline02   
        
        #see which direction limb is pointing
        jfirst = cmds.xform(firstJoint, query=True, translation=True, worldSpace=True )
        jsecond = cmds.xform(lastJoint, query=True, translation=True, worldSpace=True )
   
        xposCheck =0
        yposCheck =0
        zposCheck =0
 
        xCheck = jfirst[0] -jsecond[0]
        yCheck = jfirst[1] -jsecond[1]
        zCheck = jfirst[2] -jsecond[2]
        if xCheck < 0:
            xposCheck = xCheck * -1
        else:
            xposCheck = xCheck
        if yCheck < 0:
            yposCheck = yCheck * -1
        else:
            yposCheck = yCheck
        if zCheck < 0:
            zposCheck = zCheck * -1
        else:
            zposCheck = zCheck
            
        if xposCheck > yposCheck and xposCheck > zposCheck:
            print 'points in x'
            inputD = 'X'
        if yposCheck > xposCheck and yposCheck > zposCheck:
            print 'points in y'
            inputD = 'Y'
            print inputD
        if zposCheck > yposCheck and zposCheck > xposCheck:
            print 'points in z'
            inputD = 'Z'
            
        #set up pole vector, need to clean up so it works in any direction
        cmds.spaceLocator(n = UserIn + '_anim_loc')
        cmds.pointConstraint(jointList[1], UserIn + '_anim_loc')
        cmds.pointConstraint(jointList[1], UserIn + '_anim_loc', rm = True)
        if poleValue < 0:
            pole_d_calc = d_calc * -1
        else: 
            pole_d_calc = d_calc
                          
        if poleAxis == 'X':
            cmds.move( pole_d_calc, 0, 0, UserIn + '_anim_loc', r=True )
        if poleAxis == 'Y':
            cmds.move( 0, pole_d_calc, 0, UserIn + '_anim_loc', r=True )
        if poleAxis == 'Z':
            cmds.move( 0, 0, pole_d_calc, UserIn + '_anim_loc', r=True )
            print 'pole is in Z'
        cmds.makeIdentity(UserIn + '_anim_loc', apply=True, translate=True, rotate=True, scale=True )
        cmds.poleVectorConstraint( UserIn + '_anim_loc', UserIn + 'ikRPS_name' )
        
        #IK Switch: Ik connections 
        cmds.connectAttr(UserIn + '_arm_anim.IKFK', UserIn + '_arm_anim.visibility')
        cmds.connectAttr(UserIn + '_arm_anim.IKFK', UserIn + '_anim_loc.visibility')
        cmds.connectAttr(UserIn + '_arm_anim.IKFK', UserIn + 'ikRPS_name.ikBlend')
               
        #cleanUp
        cmds.parent( fkcontrolList[0], UserIn + '_controls01' )
        cmds.parent( firstJoint, UserIn + '_skeleton01' )
        cmds.parent(UserIn + '_arm_anim', UserIn + '_controls01')
        cmds.parent(UserIn + '_anim_loc', UserIn + '_controls01')
        cmds.parent(UserIn + 'ikRPS_name',UserIn + '_grp')
        cmds.parent(UserIn + '_controls01',UserIn + '_grp')
        cmds.parent(UserIn + '_skeleton01',UserIn + '_grp')
        
        #Add stretchy
        if self.chbox_stretchy.isChecked():
            distDim = cmds.distanceDimension( sp=(0, 2, 2), ep=(1, 5, 6))
            listDistLoc = cmds.listConnections(distDim)
            cmds.hide(distDim)
            cmds.hide(listDiscLoc)
            #cmds.parent(distDim,UserIn + '_grp')
           # cmds.parent(listDiscLoc,UserIn + '_grp')

            cmds.pointConstraint(firstJoint, listDistLoc[0], mo = False)
            cmds.pointConstraint(UserIn + '_arm_anim', listDistLoc[1], mo = False)
            cmds.shadingNode ('multiplyDivide', n = UserIn + 'multDivid', asUtility=True)
            cmds.shadingNode ('condition', n = UserIn + 'STREcondNod', asUtility=True)
            cmds.connectAttr(distDim + '.distance',UserIn +'multDivid.input1' + inputD)
            cmds.connectAttr(distDim + '.distance', UserIn +'STREcondNod.firstTerm')
            cmds.connectAttr(UserIn +'multDivid.output'+ inputD, UserIn +'STREcondNod.colorIfTrueR')
            cmds.setAttr(UserIn +'multDivid.operation', 2)
            cmds.setAttr(UserIn +'STREcondNod.operation', 2)

            firstJointLoc = cmds.xform(jointList[0], query=True, translation=True, worldSpace=True )
            firstjt_Y = firstJointLoc[1]
      
            cmds.setAttr(UserIn + 'multDivid.input2'+ inputD, d_calc)
            cmds.setAttr(UserIn + 'STREcondNod.secondTerm', d_calc)
            
            print d_calc
           
            for joints in jointList:
                cmds.connectAttr(UserIn + 'STREcondNod.outColorR', joints+'.scale'+ inputD)
                 
           
        ###################
       ### Add Bendy ####
        ###################            
                        
        if self.chbox_bend.isChecked():
            print 'Bendy IS ON'            
def distanceCalc(jt01, jt02):
    Point1 = cmds.xform(jt01, query=True, translation=True, worldSpace=True )
    Point2 = cmds.xform(jt02, query=True, translation=True, worldSpace=True )
    
    j1_valX = Point1[0]
    j1_valY = Point1[1] 
    j1_valZ = Point1[2]
    
    j2_valX = Point2[0]
    j2_valY = Point2[1]
    j2_valZ = Point2[2]
    
    dist = (j2_valX - j1_valX)**2 + (j2_valY - j1_valY)**2 +(j2_valZ-j1_valZ)**2 
 
    if dist < 0:
           dist = dist*-1
    return dist**(1/2.0)
    
                 
ex = AutoArmGUI()


